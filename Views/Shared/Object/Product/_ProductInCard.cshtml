
@model DomainProduct.Entities.Product

@*
    reference: https://developers.google.com/search/docs/data-types/product
*@

<div id="Product_@Model.IdProduct" data-id="Product_@Model.IdProduct" class="ui card produto product-in-card" data-exhausted="@Model.FlagExhausted" itemscope itemtype="http://schema.org/Product">
    <input type="hidden" id="selected-references_@Model.IdProduct" />
    <meta itemprop="productID" content="@Model.IdProduct">
    <div class="content">

        @if(Model.PricePromotion != null && Model.PricePromotion > 0){
            <div class="flag-off">
                <span class="new-value-off"></span>
                <span class="value-off">@((Model.PricePromotion - Model.Price) * 100 / Model.PricePromotion)</span>
                <span class="text-off">% Off</span>
            </div>
        }
        
        @if (Model.AlternativeImage != null)
        {
            <a class="ui slide masked reveal image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                <img itemprop="image" id="mainImageCard_@Model.IdProduct" src="/assets/image/img_default.png" data-src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                <img src="@Model.AlternativeImage" class="hidden content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">

                @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                {
                    <div class="ui bottom right attached label massive imagetag">
                        <img src="@Model.SealStatus.Image" alt="@Model.SealStatus.Name" class="ui image tiny" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                    </div>
                }
            </a>
        }
        else
        {
            <a class="ui image fluid" itemprop="url" href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                <img id="mainImageCard_@Model.IdProduct" src="@(Model.ImageHome != null ? Model.ImageHome : "/assets/image/img_default.png")" class="visible content" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                @if (Model.SealStatus != null && Model.SealStatus.Name != "Normal")
                {
                    <div class="ui bottom right attached label massive imagetag">
                        <img src="@Model.SealStatus.Image" class="ui image tiny" onerror="imgError(this)" alt="@Model.Name" title="@Model.Name">
                    </div>
                }
            </a>
        }

        <!-- <div class="ui horizontal divider avaliacao">
            <div class="ui tiny star rating" data-rating="@Model.Rate.Value.ToString().Replace(",", ".")"></div>
        </div> -->


        <div class="info">

            <div class="sku-options mobile-hide tablet-hide @(Model.AvailableReferences != null ? "mask" : "") @(Session["segment"] != null && Session["segment"].ToString() == "b2b" ? "hideme" : string.Empty)">

                <span id="produto-esgotado_@Model.IdProduct" class="text center produto-esgotado-label hideme @(Model.FlagExhausted ? " " : "hideme" )">Produto Esgotado</span>
                <!-- Verificar se o produto é conjunto -->
                @if (Model.HasConjunct)
                {
                    <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="Comprar" class="ui labeled icon button action fluid btn-comprar text uppercase" data-idproduct="@Model.IdProduct" data-name="Model.Name">
                        <i id="btn-icon-card-Model.IdProduct" class="icon announcement"></i>
                    </a>
                }
                else if (Model.FlagExhausted || Model.Stock <= 0)
                {
                    <a id="btn-comprar-card-@Model.IdProduct" title="Avise-me" class="ui labeled icon button grey fluid avise-card avise-me-modal text uppercase" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon announcement"></i>
                        Avise-me
                    </a>
                }
                else if (Session["EventList"] != null)
                {
                    <a id="add-event-list-@Model.IdProduct" title="Adicionar à Lista" class="ui labeled icon button primary fluid add-event-list text uppercase" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i>
                        Adicionar à Lista
                    </a>
                }
                else
                {
                    <a id="btn-comprar-card-@Model.IdProduct" title="Comprar" class="ui icon button btn-comprar-card text uppercase" data-idproduct="@Model.IdProduct" data-name="@Model.Name">
                        <!-- <i id="btn-icon-card-@Model.IdProduct" class="icon add to cart"></i> -->
                        <img id="btn-comprar-card-@Model.IdProduct" class="icon-cart-product" src="/assets/image/shopping-bag-white.svg" />
                    </a>
                }

                @{
                    List<DomainCustomer.Entities.Wishlist.WishlistItem> wishList = null;
                    bool inlist = false;
                    string color = "grey";
                    string textListaDesejo = "Adicionar à lista de desejos";
                    string combinacoes = "";

                    if (Request.Cookies["WishList"] == null)
                    {
                        @Html.Action("LoadWishListCookie", "Customer")
                    }

                    wishList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DomainCustomer.Entities.Wishlist.WishlistItem>>(Request.Cookies["WishList"] != null ? HttpUtility.UrlDecode(Request.Cookies["WishList"].Value) : string.Empty);

                    if (wishList != null)
                    {
                        if (Model.AvailableReferences == null || Model.AvailableReferences.Count() == 0)
                        {
                            inlist = wishList.Find(p => p.IdProduct == Model.IdProduct) != null ? true : false;
                        }
                    }
                    if (inlist)
                    {
                        color = "red";
                        textListaDesejo = "Remover da lista de desejos";

                    }
                }

                @{
                    bool isb2b = Session["segment"] != null && Session["segment"].ToString() == "b2b" ? true : false;

                    DomainAssistedSale.Entities.Seller _assistedSale = (DomainAssistedSale.Entities.Seller)Session["Seller"];
                    bool isAssistedSale = _assistedSale != null ? true : false;


                    if (!Model.HasConjunct && !isb2b && !isAssistedSale)
                    {
                        <div class="ui attached massive wishlist">
                            <div class="bcg-heart wishlist-btn" data-wishlist-local="card" data-tooltip="@textListaDesejo" data-position="top right">
                                <i class="wishlist-item icon heart" data-in-list="@inlist" data-have-sku="@(Model.AvailableReferences != null && Model.AvailableReferences.Count() > 0 ? "true" : "false")" data-product-id="@Model.IdProduct"></i>
                            </div>
                        </div>
                    }
                }
                
            </div>

            
        </div>
        <div class="dados">
            <a href="@(Model.UrlFriendlyCustom != null ? Model.UrlFriendlyCustom : Model.UrlFriendly)" title="@Model.Name">
                <h3 class="ui dividing header center aligned title-product-card">
                    @Model.Name
                </h3>
            </a>


            <div class="offers" itemprop="offers" itemscope itemtype="http://schema.org/Offer">

                <meta itemprop="priceCurrency" content="BRL" />
                @if (Model.PricePromotion != null && Model.PricePromotion > 0)
                {
                    <span id="basePrice_@Model.IdProduct" class="precoDe"><i>@string.Format("{0:c}", Model.Price)</i> @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)</span>
                    <span class="precoPor">R$ <span>@string.Format("{0:n2}", Model.PricePromotion)</span></span>
                    <meta itemprop="price" content="@string.Format("{0:n2}", Model.PricePromotion).Replace(".", "").Replace(",", ".")" />
                }
                else
                {
                    <span id="price_@Model.IdProduct" class="preco">
                        <span class="precoBase">
                            @(Session["segment"] != null && Session["segment"].ToString() == "b2b" && Model.AvailableReferences != null ? "a partir de" : string.Empty)
                        </span>
                        R$ @string.Format("{0:n2}", Model.Price)
                    </span>
                    <meta itemprop="price" content="@string.Format("{0:n2}", Model.Price).Replace(".", "").Replace(",", ".")" />
                }
                <!-- @if (Model.InstallmentMax != null)
                {
                    <span class="parcelamento">
                        ou em <span class="installmentMaxNumber">@Model.InstallmentMax.MaxNumber</span>
                        x de <span class="installmentMaxValue">@string.Format("{0:c}", Model.InstallmentMax.Value)</span>
                    </span>
                } -->

                <!-- @if (Model.Stock >= 0 && !Model.FlagExhausted)
                {
                    <br /><br />
                    <span class="text color grey regular parcelamento small">
                        @Model.DescriptionAvailabilityStatus
                    </span>
                } -->

                @if (!Model.FlagExhausted && Model.Stock > 0)
                {
                    <meta itemprop="availability" content="http://schema.org/InStock" title="disponível" />
                }
                else
                {
                    <meta itemprop="availability" content="http://schema.org/SoldOut" title="esgotado" />
                }

            </div>
        </div>
        
    </div>
</div>